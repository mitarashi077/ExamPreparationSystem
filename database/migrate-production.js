const { PrismaClient } = require('@prisma/client')

async function runMigrations() {
  // Neon„ÅÆÊé•Á∂öÊñáÂ≠óÂàóÔºàÊú¨Áï™Áí∞Â¢ÉÁî®Ôºâ
  const DATABASE_URL = process.env.DATABASE_URL

  if (!DATABASE_URL) {
    console.error('‚ùå DATABASE_URL environment variable is required')
    process.exit(1)
  }

  console.log('üöÄ Starting database migration...')
  console.log(
    'üì° Connecting to:',
    DATABASE_URL.split('@')[1]?.split('/')[0] || 'database',
  )

  const prisma = new PrismaClient({
    datasources: {
      db: {
        url: DATABASE_URL,
      },
    },
  })

  try {
    // „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂ö„ÉÜ„Çπ„Éà
    await prisma.$connect()
    console.log('‚úÖ Database connection successful')

    // „ÉÜ„Éº„Éñ„É´‰ΩúÊàêÔºàÊâãÂãï„Çπ„Ç≠„Éº„ÉûÂÆüË°åÔºâ
    console.log('üìù Creating database schema...')

    // Categories „ÉÜ„Éº„Éñ„É´
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "Category" (
        "id" TEXT NOT NULL,
        "name" TEXT NOT NULL,
        "description" TEXT,
        "parentId" TEXT,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "Category_pkey" PRIMARY KEY ("id")
      );
    `

    // Questions „ÉÜ„Éº„Éñ„É´
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "Question" (
        "id" TEXT NOT NULL,
        "content" TEXT NOT NULL,
        "explanation" TEXT,
        "difficulty" INTEGER NOT NULL DEFAULT 1,
        "year" INTEGER,
        "session" TEXT,
        "categoryId" TEXT NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "Question_pkey" PRIMARY KEY ("id")
      );
    `

    // Choices „ÉÜ„Éº„Éñ„É´
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "Choice" (
        "id" TEXT NOT NULL,
        "content" TEXT NOT NULL,
        "isCorrect" BOOLEAN NOT NULL DEFAULT false,
        "questionId" TEXT NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "Choice_pkey" PRIMARY KEY ("id")
      );
    `

    // Answers „ÉÜ„Éº„Éñ„É´
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "Answer" (
        "id" TEXT NOT NULL,
        "isCorrect" BOOLEAN NOT NULL,
        "timeSpent" INTEGER,
        "deviceType" TEXT,
        "questionId" TEXT NOT NULL,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "Answer_pkey" PRIMARY KEY ("id")
      );
    `

    // StudySession „ÉÜ„Éº„Éñ„É´
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "StudySession" (
        "id" TEXT NOT NULL,
        "deviceType" TEXT,
        "duration" INTEGER,
        "score" DOUBLE PRECISION,
        "categoryId" TEXT,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "StudySession_pkey" PRIMARY KEY ("id")
      );
    `

    // ReviewItem „ÉÜ„Éº„Éñ„É´
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "ReviewItem" (
        "id" TEXT NOT NULL,
        "questionId" TEXT NOT NULL,
        "masteryLevel" INTEGER NOT NULL DEFAULT 0,
        "reviewCount" INTEGER NOT NULL DEFAULT 0,
        "lastReviewed" TIMESTAMP(3),
        "nextReview" TIMESTAMP(3) NOT NULL,
        "wrongCount" INTEGER NOT NULL DEFAULT 1,
        "correctStreak" INTEGER NOT NULL DEFAULT 0,
        "priority" INTEGER NOT NULL DEFAULT 1,
        "isActive" BOOLEAN NOT NULL DEFAULT true,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        "updatedAt" TIMESTAMP(3) NOT NULL,
        CONSTRAINT "ReviewItem_pkey" PRIMARY KEY ("id"),
        CONSTRAINT "ReviewItem_questionId_key" UNIQUE ("questionId")
      );
    `

    // ReviewSession „ÉÜ„Éº„Éñ„É´
    await prisma.$executeRaw`
      CREATE TABLE IF NOT EXISTS "ReviewSession" (
        "id" TEXT NOT NULL,
        "duration" INTEGER,
        "totalItems" INTEGER NOT NULL DEFAULT 0,
        "correctItems" INTEGER NOT NULL DEFAULT 0,
        "deviceType" TEXT,
        "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
        CONSTRAINT "ReviewSession_pkey" PRIMARY KEY ("id")
      );
    `

    console.log('‚úÖ Database schema created successfully')

    // ÂàùÊúü„Éá„Éº„ÇøÊäïÂÖ•
    console.log('üìä Inserting initial data...')

    // „Çµ„É≥„Éó„É´„Ç´„ÉÜ„Ç¥„É™
    await prisma.$executeRaw`
      INSERT INTO "Category" ("id", "name", "description", "createdAt", "updatedAt") 
      VALUES 
        ('cat1', '„Ç®„É≥„Éô„Éá„ÉÉ„Éâ„Ç∑„Çπ„ÉÜ„É†Âü∫Á§é', '„Ç®„É≥„Éô„Éá„ÉÉ„Éâ„Ç∑„Çπ„ÉÜ„É†„ÅÆÂü∫Êú¨Ê¶ÇÂøµ', NOW(), NOW()),
        ('cat2', '„Éè„Éº„Éâ„Ç¶„Çß„Ç¢Ë®≠Ë®à', '„Éè„Éº„Éâ„Ç¶„Çß„Ç¢Ë®≠Ë®à„Å´Èñ¢„Åô„ÇãÂïèÈ°å', NOW(), NOW()),
        ('cat3', '„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢Ë®≠Ë®à', '„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢Ë®≠Ë®à„Å®„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞', NOW(), NOW())
      ON CONFLICT ("id") DO NOTHING;
    `

    console.log('‚úÖ Initial data inserted successfully')
    console.log('üéâ Database migration completed!')
  } catch (error) {
    console.error('‚ùå Migration failed:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË®≠ÂÆöÁ¢∫Ë™ç
if (process.argv.includes('--check')) {
  console.log(
    'DATABASE_URL:',
    process.env.DATABASE_URL ? '‚úÖ Set' : '‚ùå Not set',
  )
  process.exit(0)
}

runMigrations().catch(console.error)
