{
  "permissions": {
    "allow": [
      "Bash(git config:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(rm:*)",
      "Bash(powershell:*)",
      "Bash(git -C C:/work/05_git/claude-code-settings status)",
      "Bash(git -C C:/work/05_git/claude-code-settings add commands/spec.md commands/requirements.md commands/design.md commands/tasks.md)",
      "Bash(git -C C:/work/05_git/claude-code-settings commit -m \"fix: Remove .tmp directory usage from spec-driven development commands\n\n- spec.md: Use existing docs/ structure instead of .tmp\n- requirements.md: Create requirements in docs/requirements/\n- design.md: Create design docs in docs/design/\n- tasks.md: Create task lists in docs/plans/\n\nThis prevents creation of temporary files and follows established \ndocumentation structure conventions.\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git -C C:/work/05_git/claude-code-settings add settings.json)",
      "Bash(git -C C:/work/05_git/claude-code-settings commit -m \"fix: Simplify session-end hook to avoid PowerShell escaping issues\n\n- Replace complex PowerShell script with simple git add && commit\n- Ensures session-end auto-commit works reliably\n- Maintains atomic commit enforcement via pre-commit hook\n\nü§ñ Generated with [Claude Code](https://claude.ai/code)\nCo-Authored-By: Claude <noreply@anthropic.com>\")",
      "Bash(git reset:*)",
      "Bash(git checkout:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)",
      "Bash(gh pr merge:*)",
      "Bash(git pull:*)",
      "Bash(git stash:*)",
      "Bash(echo:*)",
      "Bash(gh pr view:*)",
      "Bash(git branch:*)",
      "Bash(cp:*)",
      "Bash(diff:*)",
      "Bash(npm run:*)",
      "Bash(git rebase:*)",
      "Bash(tasklist:*)",
      "Bash(wmic:*)",
      "Bash(taskkill:*)",
      "Bash(claude-code doctor)",
      "Bash(gh pr create:*)",
      "Bash(gh pr comment:*)",
      "Bash(git remote:*)",
      "Bash(npm install:*)",
      "Bash(gh pr checks:*)",
      "Bash(git merge:*)",
      "Bash(curl:*)",
      "Bash(gh pr checkout:*)",
      "Bash(git fetch:*)",
      "Bash(git restore:*)",
      "Bash(git rm:*)",
      "Bash(chmod:*)",
      "Bash(./claude-start.sh)",
      "Bash(./claude-start-pro.sh:*)",
      "WebFetch(domain:note.com)",
      "Bash(node:*)",
      "Bash(npx prisma migrate dev:*)",
      "Bash(npx prisma generate:*)",
      "Bash(npx prisma:*)",
      "Bash(node:*)",
      "Bash(npx tsc:*)",
      "Bash(mkdir:*)",
      "Bash(npm test:*)",
      "Bash(npx eslint:*)",
      "Bash(grep:*)",
      "Bash(mv:*)",
      "Bash(git rm:*)",
      "Bash(gh pr edit:*)",
      "Bash(gh label:*)",
      "Bash(gh pr list:*)"
    ],
    "deny": []
  },
  "project": "ExamPreparationSystem",
  "description": "Ë©¶È®ìÂïèÈ°åÊ∫ñÂÇô„Ç∑„Çπ„ÉÜ„É† - Claude CodeÈñãÁô∫Áî®Ë®≠ÂÆö",
  "extends": "C:\\work\\05_git\\claude-code-settings\\settings.json",
  "development_process": {
    "parallel_development": {
      "enabled": true,
      "max_concurrent_tasks": 3,
      "agent_roles": {
        "frontend_lead": "frontend-executor",
        "backend_lead": "backend-executor",
        "integration_lead": "task-executor",
        "qa_lead": "quality-fixer",
        "review_lead": "document-reviewer",
        "design_lead": "technical-designer",
        "decomposition_lead": "task-decomposer",
        "git_operations_only": "git-manager",
        "issue_manager": "general-purpose",
        "issue_resolver": "issue-resolver"
      },
      "workflow_stages": {
        "1_implementation": [
          "task-executor",
          "frontend-executor",
          "backend-executor"
        ],
        "2_quality_check": "quality-fixer",
        "3_git_operations": "git-manager",
        "4_review": "document-reviewer",
        "5_approval": "technical-designer"
      },
      "restrictions": {
        "git_operations": {
          "exclusive_agent": "git-manager",
          "prohibited_agents": [
            "task-executor",
            "quality-fixer",
            "frontend-executor",
            "backend-executor"
          ]
        },
        "implementation": {
          "no_git_access": [
            "task-executor",
            "quality-fixer",
            "frontend-executor",
            "backend-executor"
          ]
        },
        "review": {
          "read_only": [
            "document-reviewer",
            "technical-designer"
          ]
        },
        "single_responsibility": {
          "rule": "üéØ ONE AGENT = ONE RESPONSIBILITY (Âçò‰∏ÄË≤¨‰ªª„ÅÆÂéüÂâá)",
          "principle": "Each agent has ONE clear job. If you can't do it alone, COLLABORATE don't delegate",
          "agent_responsibilities": {
            "git-manager": "Git operations ONLY (commit, push, merge, branch)",
            "quality-fixer": "TypeScript/code quality fixes ONLY (if unfixable ‚Üí escalate to technical-designer)",
            "document-reviewer": "Document content review ONLY (no editing)",
            "document-fixer": "Document fixes ONLY (non-technical docs, formatting)",
            "frontend-executor": "React/UI implementation (3+ files OR complex UI logic)",
            "backend-executor": "Node.js/API implementation (3+ files OR complex business logic)",
            "task-executor": "Simple implementation (1-2 files, straightforward logic)",
            "technical-designer": "System design creation ONLY (no implementation)",
            "requirement-analyzer": "Requirements analysis ONLY (no design)",
            "work-planner": "Implementation planning ONLY (after technical design)",
            "task-decomposer": "Task breakdown ONLY (convert plans to actionable items)",
            "prd-creator": "PRD creation ONLY (business requirements)"
          },
          "task_assignment_rules": {
            "implementation_size_criteria": {
              "task-executor": "1-2 files, straightforward logic, no complex dependencies",
              "frontend-executor": "3+ files OR complex UI logic OR state management OR component architecture",
              "backend-executor": "3+ files OR complex business logic OR database operations OR API design"
            },
            "document_editing_rights": {
              "technical-designer": "ADR, Design Doc, technical specifications only",
              "document-fixer": "README, non-technical docs, formatting fixes only",
              "work-planner": "Implementation plans, task lists only",
              "prd-creator": "PRD, business requirements only",
              "others": "No document editing rights"
            },
            "error_escalation": {
              "quality-fixer_cannot_fix": "escalate to technical-designer",
              "implementation_too_complex": "task-executor ‚Üí specialized executor",
              "design_requires_change": "any agent ‚Üí technical-designer",
              "git_operations_fail": "git-manager handles all retries and conflict resolution"
            }
          },
          "collaboration_not_delegation": {
            "bad": "Agent A asks Agent B to do Agent A's job",
            "good": "Agent A does their part, Agent B does their part, results combined",
            "example": "PR Review = document-reviewer reviews docs + quality-fixer checks code + results combined for approval"
          },
          "prohibited": [
            "git-manager doing code review",
            "quality-fixer doing git operations",
            "document-reviewer doing code fixes",
            "Any agent doing another agent's core job"
          ],
          "enforcement": "Ask: Is this MY responsibility? If no, don't do it. If yes, do it directly."
        }
      }
    },
    "pr_review_process": {
      "mandatory_review": true,
      "multi_stage_review": {
        "stage_1_code_quality": "quality-fixer",
        "stage_2_design_alignment": "technical-designer",
        "stage_3_documentation": "document-reviewer",
        "stage_4_requirements": "requirement-analyzer"
      },
      "approval_criteria": {
        "code_quality": "quality-fixer reports PASS or fixes applied",
        "design_alignment": "technical-designer confirms architecture compliance",
        "documentation": "document-reviewer approves or no doc changes",
        "requirements": "requirement-analyzer confirms requirements met"
      },
      "final_approval": "All 4 stages must pass for merge approval",
      "merge_agent": "git-manager",
      "discussion_required": false,
      "auto_merge_disabled": true,
      "review_checklist": [
        "Code quality and standards",
        "Test coverage and reliability",
        "Documentation completeness",
        "Security considerations",
        "Performance impact",
        "Integration compatibility"
      ],
      "auto_assign": {
        "reviewers": [
          "quality-fixer",
          "technical-designer"
        ],
        "assignees": [
          "auto-assign-author"
        ],
        "labels": {
          "frontend_changes": "frontend",
          "backend_changes": "backend",
          "docs_changes": "documentation",
          "database_changes": "database"
        },
        "projects": [
          "ExamPreparationSystem"
        ],
        "milestone": "auto-detect"
      }
    }
  }
}